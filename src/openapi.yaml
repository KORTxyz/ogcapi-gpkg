openapi: 3.0.2
info:
  x-logo:
    href: https://kortxyz.github.io/favicon.ico
  title: OGCAPI
  version: 0.0.1
  description: Implemations of OGC API
  contact:
    name: Tino Kastbjerg Stigsen
    email: info@kort.xyz
    url: https://kort.xyz
  license:
    name: CC-BY 4.0 license
    url: https://creativecommons.org/licenses/by/4.0/
servers:
  - url: https://localhost:3000
tags:
  - name: Capabilities
    description: essential characteristics of this API
    x-displayName: Capabilities
  - name: Features
    description: Items from a collection
    x-displayName: Features
  - name: Tile Matrix Sets
    description: Metadata about tileMatrixSets
    x-displayName: Tile Matrix Sets
  - name: Tiles
    description: Data partitioned into a hierarchy of tiles of a collection
    x-displayName: Collection Tiles
  - name: Styles
    description: Styles to render a map
    x-displayName: Styles
  - name: Resources
    description: Resources that can be used by styles (fonts, icons)
    x-displayName: Resources

x-tagGroups:
  - name: OGC API - Common
    tags:
      - Capabilities
  - name: OGC API - Features
    tags:
      - Features
  - name: OGC API - Tiles
    tags:
      - Tile Matrix Sets
      - Collection Tiles
  - name: OGC API - Styles
    tags:
      - Styles
      - Resources

paths:
  /:
    get:
      operationId: getLandingpage
      tags:
        - Capabilities
      summary: get Landingpage
      description: First place a user would normally hit
      parameters:
        - $ref: "#/components/parameters/fCommon"
      responses:
        200:
          description: Landingpage of the API
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/landingpage"
        400:
          $ref: "#/components/responses/ServerError"
      security:
        - {}
  /conformance:
    get:
      operationId: getConformance
      tags:
        - Capabilities
      summary: conformance declaration
      description: >-
        The URIs of all conformance classes supported by the server. This
        information is provided to support 'generic' clients that want to access
        multiple OGC API implementations - and not 'just' a specific API. For
        clients accessing only a single API, this information is in general not
        relevant and the OpenAPI definition details the required information
        about the API.
      parameters:
        - $ref: "#/components/parameters/fCommon"
      responses:
        200:
          description: The operation was executed successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/confClasses"
        400:
          $ref: "#/components/responses/ServerError"
      security:
        - {}
  /api:
    get:
      operationId: getAPI
      tags:
        - Capabilities
      summary: get API description
      description: Description of the API.
      parameters:
        - $ref: "#/components/parameters/fCommon"
      responses:
        200:
          description: The operation was executed successfully.
        400:
          $ref: "#/components/responses/ServerError"
      security:
        - {}
  /collections:
    get:
      operationId: getCollections
      tags:
        - Capabilities
      summary: get collections
      description: Show an overview of collections available in the dataset.
      parameters:
        - $ref: "#/components/parameters/fCommon"
        - $ref: "#/components/parameters/query"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
        - $ref: "#/components/parameters/bbox"
      responses:
        200:
          description: Collections in the API
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/collections"
        400:
          $ref: "#/components/responses/ServerError"
      security:
        - {}
  /collections/{collectionId}:
    get:
      operationId: getCollection
      tags:
        - Capabilities
      summary: get collection metadata
      description: Show details about a collection available in the dataset.
      parameters:
        - $ref: "#/components/parameters/fCommon"
        - $ref: "#/components/parameters/collectionId"
      responses:
        200:
          description: collections metadata
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/collection"
        400:
          $ref: "#/components/responses/ServerError"
      security:
        - {}
  /collections/{collectionId}/items:
    get:
      operationId: getItems
      tags:
        - Features
      summary: get Items
      description: Fetches features in the collection
      parameters:
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/bbox"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
        - $ref: "#/components/parameters/datetime"
        - $ref: "#/components/parameters/properties"
      responses:
        200:
          $ref: "#/components/responses/Features"
        400:
          $ref: "#/components/responses/ServerError"
      security:
        - {}
    post:
      operationId: postItems
      tags:
        - Features
      summary: post Items
      description: Add features to the collection in the collection
      parameters:
        - $ref: "#/components/parameters/collectionId"
      requestBody:
        description: features to be added as geojson
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/featureCollectionGeoJSON"
      responses:
        200:
          description: Success
        400:
          $ref: "#/components/responses/ServerError"
      security:
        - {}
  /collections/{collectionId}/items/{featureId}:
    get:
      operationId: getItem
      tags:
        - Features
      summary: get Item
      description: Fetches a specific feature in the collection
      parameters:
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/featureId"
      responses:
        200:
          $ref: "#/components/responses/Feature"
        400:
          $ref: "#/components/responses/ServerError"
      security:
        - {}
  /collections/{collectionId}/map/tiles:
    get:
      operationId: getCollectionMapTilesets
      tags:
        - Collection Tiles
      summary: get Map Tilesets
      description: Fetch a list of tilematrixsets
      parameters:
        - $ref: "#/components/parameters/collectionId"
      responses:
        200:
          description: List of available tilesets.
          content:
            text/html:
              schema:
                type: string
            application/json:
              schema:
                type: object
                required:
                  - tilesets
                properties:
                  links:
                    type: array
                    items:
                      $ref: "#/components/schemas/link"
                  tilesets:
                    type: array
                    items:
                      $ref: "#/components/schemas/tileSet"
        400:
          $ref: "#/components/responses/ServerError"
      security:
        - {}
  /collections/{collectionId}/map/tiles/{tileMatrixSetId}:
    get:
      operationId: getCollectionMapTileset
      tags:
        - Collection Tiles
      summary: get Tileset
      description: Fetch description of a specific tilematrixset
      parameters:
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/tileMatrixSetId"
        - $ref: "#/components/parameters/fTileset"
      responses:
        200:
          description: Description of the tileset
          content:
            text/html:
              schema:
                type: string
            application/tilejson:
              schema:
                type: object
            application/json:
              schema:
                $ref: "#/components/schemas/tileSet"
              examples:
                tileSet:
                  $ref: "#/components/examples/tileSet"

        400:
          $ref: "#/components/responses/ServerError"

      security:
        - {}
  ? /collections/{collectionId}/map/tiles/{tileMatrixSetId}/{tileMatrix}/{tileRow}/{tileCol}
  : get:
      operationId: getCollectionMapTile
      tags:
        - Collection Tiles
      summary: get MapTile
      description: Fetches a single maptile from a collection
      parameters:
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/tileMatrixSetId"
        - $ref: "#/components/parameters/tileMatrix"
        - $ref: "#/components/parameters/tileRow"
        - $ref: "#/components/parameters/tileCol"
      responses:
        200:
          description: Tile
          content:
            image/*:
              schema:
                type: string
                format: binary
        400:
          $ref: "#/components/responses/ServerError"
      security:
        - {}
  /collections/{collectionId}/schema:
    get:
      operationId: getSchema
      tags:
        - Features
      summary: get Schema
      description: Fetches a schema for collection
      parameters:
        - $ref: "#/components/parameters/collectionId"
      responses:
        "200":
          description: Schema
        400:
          $ref: "#/components/responses/ServerError"
      security:
        - {}

  /collections/{collectionId}/styles:
    get:
      operationId: getCollectionStyles
      tags:
        - Styles
      summary: get Styles
      description: Fetches all styles for collection
      parameters:
        - $ref: "#/components/parameters/collectionId"
      responses:
        "200":
          description: Style
        400:
          $ref: "#/components/responses/ServerError"
      security:
        - {}
  /collections/{collectionId}/styles/{styleId}:
    get:
      operationId: getCollectionStyle
      tags:
        - Styles
      summary: get Style
      description: Fetches a style for collection
      parameters:
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/styleId"
      responses:
        "200":
          description: Style
        400:
          $ref: "#/components/responses/ServerError"
      security:
        - {}
  /tileMatrixSets:
    get:
      tags:
        - Tile Matrix Sets
      summary: fetch all available tile matrix sets (tiling schemes)
      operationId: getTileMatrixSets
      parameters:
        - $ref: "#/components/parameters/fCommon"
      responses:
        200:
          description: An array of tile matrix sets (tiling schemes).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tileMatrixSets"
        400:
          $ref: "#/components/responses/ServerError"
      security:
        - {}
  /tileMatrixSets/{tileMatrixSetId}:
    get:
      tags:
        - Tile Matrix Sets
      summary: fetch a tile matrix sets (tiling scheme) by id
      operationId: getTileMatrixSet
      parameters:
        - $ref: "#/components/parameters/fCommon"
        - $ref: "#/components/parameters/tileMatrixSetId"
      responses:
        200:
          description: tile matrix sets (a tiling scheme).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tileMatrixSet"
        400:
          $ref: "#/components/responses/ServerError"
      security:
        - {}
  /collections/{collectionId}/tiles:
    get:
      operationId: getCollectionTilesets
      tags:
        - Collection Tiles
      summary: get Tilesets
      description: Fetch a list of tilematrixsets
      parameters:
        - $ref: "#/components/parameters/collectionId"
      responses:
        200:
          description: List of available tilesets.
          content:
            text/html:
              schema:
                type: string
            application/json:
              schema:
                type: object
                required:
                  - tilesets
                properties:
                  links:
                    type: array
                    items:
                      $ref: "#/components/schemas/link"
                  tilesets:
                    type: array
                    items:
                      $ref: "#/components/schemas/tileSet"
        400:
          $ref: "#/components/responses/ServerError"
      security:
        - {}
  /collections/{collectionId}/tiles/{tileMatrixSetId}:
    get:
      operationId: getCollectionTileset
      tags:
        - Collection Tiles
      summary: get Tileset
      description: Fetch description of a specific tilematrixset
      parameters:
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/tileMatrixSetId"
        - $ref: "#/components/parameters/fTileset"
      responses:
        200:
          description: Description of the tileset
          content:
            text/html:
              schema:
                type: string
            application/tilejson:
              schema:
                type: object
            application/json:
              schema:
                $ref: "#/components/schemas/tileSet"
              examples:
                tileSet:
                  $ref: "#/components/examples/tileSet"

        400:
          $ref: "#/components/responses/ServerError"

      security:
        - {}
  /collections/{collectionId}/tiles/{tileMatrixSetId}/{tileMatrix}/{tileRow}/{tileCol}:
    get:
      operationId: getCollectionTile
      tags:
        - Collection Tiles
      summary: get Tile
      description: Fetches a single tile from a collection
      parameters:
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/tileMatrixSetId"
        - $ref: "#/components/parameters/tileMatrix"
        - $ref: "#/components/parameters/tileRow"
        - $ref: "#/components/parameters/tileCol"
      responses:
        200:
          description: Tile
          content:
            image/*:
              schema:
                type: string
                format: binary
        400:
          $ref: "#/components/responses/ServerError"
      security:
        - {}
  /styles:
    get:
      tags:
        - Styles
      summary: information about the available styles
      operationId: getStyles
      description: |-
        This operation fetches the set of styles available. For
        each style the id, a title, links to the stylesheet of
        the style in each supported encoding, and the link to the
        metadata is provided.

        Testbed-15 only requires support for a small number of the
        styles. Therefore, the currently simple approach is sufficient,
        but in general the operation should support paging (using a
        parameter `limit` and links to the `next` page in responses).
      parameters:
        - $ref: "#/components/parameters/fCommon"
      responses:
        200:
          description: the set of available styles
          content:
            text/html:
              schema:
                type: string
            application/json:
              schema:
                type: object
                properties:
                  links:
                    type: array
                  styles:
                    type: array
        400:
          $ref: "#/components/responses/ServerError"
      security:
        - {}
    post:
      tags:
        - Styles
      summary: adds a new style
      operationId: postStyle
      description: |-
        Adds a style to the style repository or just validates a style.

        If the parameter validate is set to yes, the style will be validated before adding the style to the server. If the parameter validate is set to only, the server will not be changed and only the validation result will be returned.

        In case, a new style is created, the following rules apply.

        If the style submitted in the request body includes an identifier (this depends on the style encoding), that identifier will be used. If a style with that identifier already exists, an error is returned.

        If no identifier can be determined from the submitted style, the server will assign a new identifier to the style.

        A minimal style metadata resource is created at /styles/{styleId}/metadata. Please update the metadata using a PUT request to keep the style metadata consistent with the style definition.

        The URI of the new style is returned in the header Location.

        This operation is only available to registered style authors.
      parameters:
        - $ref: "#/components/parameters/validate"
      responses:
        "201":
          description: style created
          headers:
            Location:
              schema:
                type: string
              description: URI of the new style
        "204":
          description: style validated successfully, no style has been created
        "400":
          description: invalid input, the style is invalid
        "401":
          description: unauthorized access
        "409":
          description: a style with that id already exists
      requestBody:
        description: Stylesheet to be added
        content:
          application/vnd.mapbox.style+json:
            schema:
              $ref: "#/components/schemas/mbstyle"
      security:
        - {}
  /styles/{styleId}:
    get:
      tags:
        - Styles
      summary: fetch a style by id
      description: |-
        Fetches the style with identifier `styleId`. The set of
        available styles can be retrieved at `/styles`.

        Not all styles are available in all style encodings.
      operationId: getStyle
      parameters:
        - $ref: "#/components/parameters/styleId"
        - $ref: "#/components/parameters/fStyle"
      responses:
        200:
          description: The style
          content:
            text/html:
              schema:
                type: string
            application/vnd.mapbox.style+json:
              schema:
                $ref: "#/components/schemas/mbstyle"
        400:
          $ref: "#/components/responses/ServerError"
      security:
        - {}
    put:
      tags:
        - Manage styles
      summary: replace a style or add a new style
      description: |-
        Replace an existing style with the id `styleId`. If no
        such style exists, a new style with that id is added.

        If the parameter `validate` is set to `yes`, the
        style will be validated before adding/updating the
        style. If the parameter `validate` is set to
        `only`, the server will not be changed and only the
        validation result will be returned.

        For updated styles, the style metadata resource at
        `/styles/{styleId}/metadata` is not updated.
        For new styles a minimal style metadata resource is
        created, too. Please update the metadata using a PUT
        request to keep the style metadata consistent with
        the style definition.

        This operation is only available to registered style
        authors.
      operationId: updateStyle
      security:
        - BasicAuth: []
      parameters:
        - $ref: "#/components/parameters/styleId"
        - $ref: "#/components/parameters/validate"
      requestBody:
        description: A single style in one of the supported style encodings.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/mbstyle"
      responses:
        "204":
          description: style updated, created or validated successfully
        "400":
          description: invalid input, the style is invalid
        "401":
          description: unauthorized access

  /resources:
    get:
      tags:
        - Resources
      summary: information about the available resources (symbols, sprites)
      operationId: getResources
      parameters:
        - $ref: "#/components/parameters/fCommon"
      responses:
        200:
          description: the set of available resources
        400:
          $ref: "#/components/responses/ServerError"
      security:
        - {}

  /resources/{resourceId}:
    get:
      tags:
        - Resources
      summary: fetch a symbol resource by id
      operationId: getResource
      parameters:
        - $ref: "#/components/parameters/resourceId"
      responses:
        200:
          description: The symbol resource
        400:
          $ref: "#/components/responses/ServerError"
      security:
        - {}

components:
  parameters:
    fCommon:
      name: f
      in: query
      description: >-
        Select the output format of the response. If no value is provided, the
        standard HTTP rules apply, i.e., the accept header will be used to
        determine the format.
      required: false
      schema:
        type: string
        enum:
          - json
          - html
    fTileset:
      name: f
      in: query
      description: >-
        Select the output format of the response. If no value is provided, the
        standard HTTP rules apply, i.e., the accept header will be used to
        determine the format.
      required: false
      schema:
        type: string
        enum:
          - json
          - html
          - tilejson
    fStyle:
      name: f
      in: query
      description: >-
        Select the output format of the response. If no value is provided, the
        standard HTTP rules apply, i.e., the accept header will be used to
        determine the format.
      required: false
      schema:
        type: string
        enum:
          - mbs
          - html
    query:
      name: q
      in: query
      description: >-
        filter collections based on a string. Query check for match in name,
        description
      required: false
      schema:
        type: string
    limit:
      name: limit
      in: query
      description: >-
        The optional limit parameter limits the number of items that are
        presented in the response document.


        Only items are counted that are on the first level of the collection in
        the response document.

        Nested objects contained within the explicitly requested items shall not
        be counted.
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 999999
        default: 99
      style: form
      explode: false
    offset:
      name: offset
      in: query
      description: >-
        The optional offset parameter offset the number of items that are
        presented in the response document.
      required: false
      schema:
        type: integer
        minimum: 0
        maximum: 999999
        default: 0
    bbox:
      name: bbox[]
      in: query
      description: >-
        Only features that have a geometry that intersects the bounding box are
        selected.

        The bounding box is provided as four or six numbers, depending on
        whether the

        coordinate reference system includes a vertical axis (height or depth):


        * Lower left corner, coordinate axis 1

        * Lower left corner, coordinate axis 2

        * Minimum value, coordinate axis 3 (optional)

        * Upper right corner, coordinate axis 1

        * Upper right corner, coordinate axis 2

        * Maximum value, coordinate axis 3 (optional)


        If the value consists of four numbers, the coordinate reference system
        is

        WGS 84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84)

        unless a different coordinate reference system is specified in the
        parameter `bbox-crs`.


        If the value consists of six numbers, the coordinate reference system is
        WGS 84 

        longitude/latitude/ellipsoidal height
        (http://www.opengis.net/def/crs/OGC/0/CRS84h)

        unless a different coordinate reference system is specified in the
        parameter `bbox-crs`.


        The query parameter `bbox-crs` is specified in OGC API - Features - Part
        2: Coordinate 

        Reference Systems by Reference.


        For WGS 84 longitude/latitude the values are in most cases the sequence
        of

        minimum longitude, minimum latitude, maximum longitude and maximum
        latitude.

        However, in cases where the box spans the antimeridian the first value

        (west-most box edge) is larger than the third value (east-most box
        edge).


        If the vertical axis is included, the third and the sixth number are the

        bottom and the top of the 3-dimensional bounding box.


        If a feature has multiple spatial geometry properties, it is the
        decision of the

        server whether only a single spatial geometry property is used to
        determine

        the extent or all relevant geometries.
      required: false
      schema:
        type: array
        minItems: 4
        maxItems: 6
        items:
          type: number
      style: form
      explode: false
    collectionId:
      name: collectionId
      in: path
      description: local identifier of a collection
      required: true
      schema:
        type: string
    datetime:
      name: datetime
      in: query
      description: >-
        Either a date-time or an interval, open or closed. Date and time
        expressions

        adhere to RFC 3339. Open intervals are expressed using double-dots.


        Examples:


        * A date-time: "2018-02-12T23:20:50Z"

        * A closed interval: "2018-02-12T00:00:00Z/2018-03-18T12:31:12Z"

        * Open intervals: "2018-02-12T00:00:00Z/.." or "../2018-03-18T12:31:12Z"


        Only features that have a temporal property that intersects the value of

        `datetime` are selected.


        If a feature has multiple temporal properties, it is the decision of the

        server whether only a single temporal property is used to determine

        the extent or all relevant temporal properties.
      required: false
      schema:
        type: string
      style: form
      explode: false
    properties:
      name: properties
      in: query
      description: >-
        Only return a subset of properties when every properties of a feature is
        not needed.


        Examples:


        * A single property: "properties=buildingtype"

        * Multiple properties: "properties=buildingtype,height,material"

        * No properties: "properties="


        Properties needs to be part of the feauture else returning an error.
      required: false
      schema:
        type: string
      style: form
      explode: false
    featureId:
      name: featureId
      in: path
      description: local identifier of a feature
      required: true
      schema:
        type: string
    tileMatrixSetId:
      name: tileMatrixSetId
      in: path
      description: ID of the tileMatrixset
      example: WebMercatorQuad
      required: true
      schema:
        type: string
    tileMatrix:
      name: tileMatrix
      in: path
      description: z value for the tile
      required: true
      schema:
        type: number
    tileRow:
      name: tileRow
      in: path
      description: x value for the tile
      required: true
      schema:
        type: number
    tileCol:
      name: tileCol
      in: path
      description: y value for the tile
      required: true
      schema:
        type: number
    styleId:
      name: styleId
      in: path
      description: Id of the style
      required: true
      schema:
        type: string
    resourceId:
      name: resourceId
      in: path
      description: Id of the resource
      required: true
      schema:
        type: string
    validate:
      name: validate
      in: query
      description: |-
        (part of conformance class 'style-validation')
        'yes' creates a new style after successful validation
        and returns 400, if validation fails,
        'no' creates the style without validation and
        'only' just validates the style without creating a
        new style and returns 400, if validation fails,
        otherwise 204.
      required: false
      style: form
      explode: false
      schema:
        type: string
        enum:
          - "yes"
          - "no"
          - only
      example: only
  schemas:
    link:
      required:
        - href
        - rel
        - type
      type: object
      properties:
        rel:
          type: string
        type:
          type: string
        title:
          type: string
        href:
          type: string
        templated:
          type: boolean
    landingpage:
      type: object
      required:
        - links
      properties:
        title:
          type: string
          example: Buildings in Bonn
        description:
          type: string
          example: >-
            Access to data about buildings in the city of Bonn via a Web API
            that conforms to the OGC API Features specification.
        links:
          type: array
          items:
            $ref: "#/components/schemas/link"
    confClasses:
      type: object
      required:
        - conformsTo
      properties:
        conformsTo:
          type: array
          items:
            type: string
    collection:
      type: object
      required:
        - id
        - links
        - extent
      properties:
        id:
          description: identifier of the collection used, for example, in URIs
          type: string
        title:
          description: human readable title of the collection
          type: string
        description:
          description: a description of the features in the collection
          type: string
        links:
          type: array
          items:
            $ref: "#/components/schemas/link"
        extent:
          description: >-
            The extent of the features in the collection. In the Core only
            spatial and temporal extents are specified. Extensions may add
            additional members to represent other extents, for example, thermal
            or pressure ranges.
          type: object
          properties:
            spatial:
              description: The spatial extent of the features in the collection.
              type: object
              properties:
                bbox:
                  description: >-
                    One or more bounding boxes that describe the spatial extent
                    of the dataset. In the Core only a single bounding box is
                    supported. Extensions may support additional areas. If
                    multiple areas are provided, the union of the bounding boxes
                    describes the spatial extent.
                  type: array
                  minItems: 1
                  items:
                    description: >-
                      Each bounding box is provided as four or six numbers,
                      depending on whether the coordinate reference system
                      includes a vertical axis (height or depth):

                      * Lower left corner, coordinate axis 1 * Lower left
                      corner, coordinate axis 2 * Minimum value, coordinate axis
                      3 (optional) * Upper right corner, coordinate axis 1 *
                      Upper right corner, coordinate axis 2 * Maximum value,
                      coordinate axis 3 (optional)

                      The coordinate reference system of the values is WGS 84
                      longitude/latitude
                      (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a
                      different coordinate reference system is specified in
                      `crs`.

                      For WGS 84 longitude/latitude the values are in most cases
                      the sequence of minimum longitude, minimum latitude,
                      maximum longitude and maximum latitude. However, in cases
                      where the box spans the antimeridian the first value
                      (west-most box edge) is larger than the third value
                      (east-most box edge).

                      If the vertical axis is included, the third and the sixth
                      number are the bottom and the top of the 3-dimensional
                      bounding box.

                      If a feature has multiple spatial geometry properties, it
                      is the decision of the server whether only a single
                      spatial geometry property is used to determine the extent
                      or all relevant geometries.
                    type: array
                    minItems: 4
                    maxItems: 6
                    items:
                      type: number
                    example:
                      - -180
                      - -90
                      - 180
                      - 90
                crs:
                  description: >-
                    Coordinate reference system of the coordinates in the
                    spatial extent (property `bbox`). The default reference
                    system is WGS 84 longitude/latitude. In the Core this is the
                    only supported coordinate reference system. Extensions may
                    support additional coordinate reference systems and add
                    additional enum values.
                  type: string
            temporal:
              description: The temporal extent of the features in the collection.
              type: object
              properties:
                interval:
                  description: >-
                    One or more time intervals that describe the temporal extent
                    of the dataset. The value `null` is supported and indicates
                    an open time intervall. In the Core only a single time
                    interval is supported. Extensions may support multiple
                    intervals. If multiple intervals are provided, the union of
                    the intervals describes the temporal extent.
                  type: array
                  minItems: 1
                  items:
                    description: >-
                      Begin and end times of the time interval. The timestamps
                      are in the coordinate reference system specified in `trs`.
                      By default this is the Gregorian calendar.
                    type: array
                    minItems: 2
                    maxItems: 2
                    items:
                      type: string
                      format: date-time
                      nullable: true
                    example:
                      - "2011-11-11T12:22:11Z"
                      - null
                trs:
                  description: >-
                    Coordinate reference system of the coordinates in the
                    temporal extent (property `interval`). The default reference
                    system is the Gregorian calendar. In the Core this is the
                    only supported temporal reference system. Extensions may
                    support additional temporal reference systems and add
                    additional enum values.
                  type: string
                  enum:
                    - http://www.opengis.net/def/uom/ISO-8601/0/Gregorian
                  default: http://www.opengis.net/def/uom/ISO-8601/0/Gregorian
        itemType:
          description: >-
            indicator about the type of the items in the collection (the default
            value is 'feature').
          type: string
          default: feature
        crs:
          description: the list of coordinate reference systems supported by the service
          type: string

    collections:
      type: object
      required:
        - links
        - collections
      properties:
        links:
          type: array
          items:
            $ref: "#/components/schemas/link"
        collections:
          type: array
          items:
            $ref: "#/components/schemas/collection"
    pointGeoJSON:
      type: object
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - Point
        coordinates:
          type: array
          minItems: 2
          items:
            type: number
    multipointGeoJSON:
      type: object
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - MultiPoint
        coordinates:
          type: array
          items:
            type: array
            minItems: 2
            items:
              type: number
    linestringGeoJSON:
      type: object
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - LineString
        coordinates:
          type: array
          minItems: 2
          items:
            type: array
            minItems: 2
            items:
              type: number
    multilinestringGeoJSON:
      type: object
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - MultiLineString
        coordinates:
          type: array
          items:
            type: array
            minItems: 2
            items:
              type: array
              minItems: 2
              items:
                type: number
    polygonGeoJSON:
      type: object
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - Polygon
        coordinates:
          type: array
          items:
            type: array
            minItems: 4
            items:
              type: array
              minItems: 2
              items:
                type: number
    multipolygonGeoJSON:
      type: object
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - MultiPolygon
        coordinates:
          type: array
          items:
            type: array
            items:
              type: array
              minItems: 4
              items:
                type: array
                minItems: 2
                items:
                  type: number
    geometryGeoJSON:
      oneOf:
        - $ref: "#/components/schemas/pointGeoJSON"
        - $ref: "#/components/schemas/multipointGeoJSON"
        - $ref: "#/components/schemas/linestringGeoJSON"
        - $ref: "#/components/schemas/multilinestringGeoJSON"
        - $ref: "#/components/schemas/polygonGeoJSON"
        - $ref: "#/components/schemas/multipolygonGeoJSON"
    featureGeoJSON:
      type: object
      required:
        - type
        - geometry
        - properties
      properties:
        type:
          type: string
          enum:
            - Feature
        geometry:
          $ref: "#/components/schemas/geometryGeoJSON"
        properties:
          type: object
          nullable: true
          additionalProperties: true
        id:
          oneOf:
            - type: string
            - type: integer
        links:
          type: array
          items:
            $ref: "#/components/schemas/link"
    timeStamp:
      description: >-
        This property indicates the time and date when the response was
        generated.
      type: string
      format: date-time
      example: "2017-08-17T08:05:32Z"
    numberMatched:
      description: |-
        The number of features of the feature type that match the selection
        parameters like `bbox`.
      type: integer
      minimum: 0
      example: 127
    numberReturned:
      description: |-
        The number of features in the feature collection.

        A server may omit this information in a response, if the information
        about the number of features is not known or difficult to compute.

        If the value is provided, the value shall be identical to the number
        of items in the "features" array.
      type: integer
      minimum: 0
      example: 10
    featureCollectionGeoJSON:
      type: object
      required:
        - type
        - features
      properties:
        type:
          type: string
          enum:
            - FeatureCollection
        features:
          type: array
          items:
            $ref: "#/components/schemas/featureGeoJSON"
        links:
          type: array
          items:
            $ref: "#/components/schemas/link"
        timeStamp:
          $ref: "#/components/schemas/timeStamp"
        numberMatched:
          $ref: "#/components/schemas/numberMatched"
        numberReturned:
          $ref: "#/components/schemas/numberReturned"
    tileMatrixSets:
      required:
        - tileMatrixSets
      type: object
      properties:
        links:
          type: array
          items:
            $ref: "#/components/schemas/link"
        tileMatrixSets:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              title:
                type: string
              tileMatrixSetURI:
                type: string
              links:
                type: array
                items:
                  $ref: "#/components/schemas/link"
            example:
              id: MyWebMercatorQuad
              title: My Google Maps Compatible for the World
              links:
                - href: https://data.example.org/tileMatrixSet/MyWebMercatorQuad
                  rel: item
                  type: application/json
    tileMatrixSetLimits:             
      type: object
      required:
      - tileMatrix
      - minTileRow
      - maxTileRow
      - minTileCol
      - maxTileCol
      properties:
        tileMatrix:
          type: string
          example: '5'
        minTileRow:
          type: number
          format: integer
          minimum: 0
          example: 0
        maxTileRow:
          type: number
          format: integer
          minimum: 0
          example: 1
        minTileCol:
          type: number
          format: integer
          minimum: 0
          example: 3
        maxTileCol:
          type: number
          format: integer
          minimum: 0
          example: 4
    exception:
      type: object
      description: >-
        Information about the exception: an error code plus an optional
        description.
      required:
        - statusCode
      properties:
        statusCode:
          type: integer
        error:
          type: string
        message:
          type: string
      example:
        statusCode: 404
        error: Not Found
        message: Route GET:/tileMatrixSets not found
    keyword:
      required:
        - keyword
      type: object
      nullable: true
      properties:
        keyword:
          type: string
          example: land cover
        code:
          type: string
          example: 4612
        codeSpace:
          type: string
          example: https://www.eionet.europa.eu/gemet/en/concept/
    tileMatrix:
      required:
        - id
        - matrixHeight
        - matrixWidth
        - scaleDenominator
        - tileHeight
        - tileWidth
        - topLeftCorner
      type: object
      properties:
        title:
          type: string
          description: Title of this tile matrix, normally used for display to a human
          example: Google Maps Compatible for the World zoom level 3
        abstract:
          type: string
          description: >-
            Brief narrative description of this tile matrix, normally available
            for display to a human
          example: >-
            Google Maps Compatible zoom level 3 that is equivalent to a scale of
            1:69885283.00358972 and has 19567.87924100512 meters of pixel size
            in the equator
        keywords:
          type: array
          description: keywords about the elements in the collection
          items:
            $ref: "#/components/schemas/keyword"
        id:
          type: string
          description: >-
            Identifier selecting one of the scales defined in the TileMatrixSet
            and representing the scaleDenominator the tile.
          example: "3"
        scaleDenominator:
          type: number
          description: Scale denominator level of this tile matrix
          example: 69885283.00358972
        topLeftCorner:
          type: array
          description: >-
            Position in CRS coordinates of the top-left corner of this tile
            matrix
          example:
            - -20037508.3427892
            - 20037508.3427892
          items:
            type: number
            format: double
        tileWidth:
          minimum: 1
          type: number
          description: Width of each tile of this tile matrix in pixels
          format: integer
          example: 256
        tileHeight:
          minimum: 1
          type: number
          description: Height of each tile of this tile matrix in pixels
          format: integer
          example: 256
        matrixHeight:
          minimum: 1
          type: number
          description: Width of the matrix (number of tiles in width)
          format: integer
          example: 8
        matrixWidth:
          minimum: 1
          type: number
          description: Height of the matrix (number of tiles in height)
          format: integer
          example: 8
    tileMatrixSet:
      required:
        - id
      type: object
      properties:
        id:
          type: string
          description: Tile matrix set identifier,
          example: WebMercatorQuad
        title:
          type: string
          description: Title of this tile matrix set, normally used for display to a human
          example: Google Maps Compatible for the World
        crs:
          type: string
          description: Reference to one coordinate reference system (CRS)
          format: uri
          example: http://www.opengis.net/def/crs/EPSG/0/3857
        tileMatrixSetURI:
          type: string
          description: Reference to a well-known scale set
          example: http://www.opengis.net/def/tilematrixset/OGC/1.0/WebMercatorQuad
        tileMatrices:
          type: array
          description: Describes a scale level and its tile matrix
          items:
            $ref: "#/components/schemas/tileMatrix"
        orderedAxes:
          type: array
          description: Order of the axes.
          items:
            type: string
        links:
          type: array
          items:
            $ref: "#/components/schemas/link"
    tileSet:
      title: Tile Set Metadata
      description:
        A resource describing a tileset based on the OGC TileSet Metadata Standard.
        At least one of the 'TileMatrixSet',  or a link with 'rel' http://www.opengis.net/def/rel/ogc/1.0/tiling-scheme
      type: object
      required: [dataType, crs, links]
      properties:
        title:
          description: A title for this tileset
          type: string
        description:
          description: Brief narrative description of this tile set
          type: string
        dataType:
          allOf:
            - description: Type of data represented in the tileset
            - $ref: "#/components/schemas/dataType"
        crs:
          allOf:
            - description: Coordinate Reference System (CRS)
            - $ref: "#/components/schemas/crs"
        tileMatrixSetURI:
          description:
            Reference to a Tile Matrix Set on an offical source for Tile Matrix
            Sets such as the OGC NA definition server (http://www.opengis.net/def/tms/).
            Required if the tile matrix set is registered on an open official source.
          type: string
          format: uri
        links:
          description:
            "Links to related resources. Possible link 'rel' values are: 'http://www.opengis.net/def/rel/ogc/1.0/dataset'
            for a URL pointing to the dataset, 'item' for a URL template to get a tile;
            'alternate' for a URL pointing to another representation of the TileSetMetadata
            (e.g a TileJSON file); 'http://www.opengis.net/def/rel/ogc/1.0/tiling-scheme'
            for a definition of the TileMatrixSet; 'http://www.opengis.net/def/rel/ogc/1.0/geodata'
            for pointing to a single collection (if the tileset represents a single collection)"
          type: array
          items:
            $ref: "#/components/schemas/link"
        tileMatrixSetLimits:
          description: Limits for the TileRow and TileCol values for each TileMatrix in
            the tileMatrixSet. If missing, there are no limits other that the ones imposed
            by the TileMatrixSet. If present the TileMatrices listed are limited and the
            rest not available at all
          type: array
          items:
            $ref: '#/components/schemas/tileMatrixSetLimits'
        # epoch:
        #   description: Epoch of the Coordinate Reference System (CRS)
        #   type: number
        layers:
          minItems: 1
          type: array
          items:
            $ref: "#/components/schemas/geospatialData"
        boundingBox:
          allOf:
            - description: Minimum bounding rectangle surrounding the tile matrix set, in the supported CRS
            - $ref: "#/components/schemas/2DBoundingBox"
        centerPoint:
          allOf:
            - description:
                Location of a tile that nicely represents the tileset. Implementations
                may use this center value to set the default location or to present a representative
                tile in a user interface
            - $ref: "#/components/schemas/tilePoint"
        # style:
        #   allOf:
        #     - description: Style involving all layers used to generate the tileset
        #     - $ref: 'style.yaml'
        attribution:
          description: Short reference to recognize the author or provider
          type: string
        license:
          description: License applicable to the tiles
          type: string
        accessConstraints:
          description:
            Restrictions on the availability of the Tile Set that the user needs
            to be aware of before using or redistributing the Tile Set
          type: string
          enum:
            - unclassified
            - restricted
            - confidential
            - secret
            - topSecret
        keywords:
          description: keywords about this tileset
          type: array
          items:
            type: string
        version:
          description:
            Version of the Tile Set. Changes if the data behind the tiles has
            been changed
          type: string
        created:
          allOf:
            - description: When the Tile Set was first produced
            - $ref: "#/components/schemas/timeStamp"
        updated:
          allOf:
            - description: Last Tile Set change/revision
            - $ref: "#/components/schemas/timeStamp"
        pointOfContact:
          description:
            Useful information to contact the authors or custodians for the Tile
            Set
          type: string
        mediaTypes:
          description: Media types available for the tiles
          type: array
          items:
            type: string

    dataType:
      anyOf:
        - type: string
          enum:
            - map
            - vector
            - coverage

    crs:
      title: CRS
      description: Reference to one coordinate reference system (CRS)
      type: string
    mbstyle:
      required:
        - layers
        - sources
        - version
      type: object
      properties:
        version:
          type: number
          example: 8
        name:
          type: string
          example: night
        sources:
          type: object
          properties:
            daraa:
              type: object
              properties:
                type:
                  type: string
                  example: vector
                url:
                  type: string
                  example: >-
                    https://services.interactive-instruments.de/vtp/daraa/tiles/default/{z}/{y}/{x}?f=mvt
        sprite:
          type: string
          example: >-
            http://vtp2018.s3-eu-west-1.amazonaws.com/static/mapstorestyle/sprites/sprites
        glyphs:
          type: string
          example: http://fonts.openmaptiles.org/{fontstack}/{range}.pbf
        layers:
          type: array
          items:
            type: object
    2DBoundingBox:
      description: Minimum bounding rectangle surrounding a 2D resource in the CRS indicated elsewhere
      type: object
      required:
        - lowerLeft
        - upperRight
      properties:
        lowerLeft:
          $ref: "#/components/schemas/2DPoint"
        upperRight:
          $ref: "#/components/schemas/2DPoint"
        crs:
          $ref: "#/components/schemas/crs"
        orderedAxes:
          type: array
          minItems: 2
          maxItems: 2
          items:
            type: string
    2DPoint:
      description: A 2D Point in the CRS indicated elsewhere
      type: array
      minItems: 2
      maxItems: 2
      items:
        type: number
    tilePoint:
      type: object
      required:
        - coordinates
      properties:
        coordinates:
          type: array
          minItems: 2
          maxItems: 2
          items:
            type: number
        crs:
          allOf:
            - description: Coordinate Reference System (CRS) of the coordinates
            - $ref: "#/components/schemas/crs"
        tileMatrix:
          description: TileMatrix identifier associated with the scaleDenominator
          type: string
        scaleDenominator:
          description: Scale denominator of the tile matrix selected
          type: number
        cellSize:
          description: Cell size of the tile matrix selected
          type: number
    geospatialData:
      type: object
      required:
      - id
      - dataType
      properties:
        title:
          description: Title of this tile matrix set, normally used for display to a human
          type: string
        description:
          description: Brief narrative description of this tile matrix set, normally
            available for display to a human
          type: string
        keywords:
          description: Unordered list of one or more commonly used or formalized word(s)
            or phrase(s) used to describe this layer
          type: string
        id:
          description: Unique identifier of the Layer. Implementation of 'identifier'
          type: string
        dataType:
          allOf:
            - description: Type of data represented in the layer
            - $ref: '#/components/schemas/dataType'
        geometryDimension:
          description: 'The geometry dimension of the features shown in this layer (0: points, 1: curves, 2: surfaces, 3: solids), unspecified: mixed or unknown'
          type: integer
          minimum: 0
          maximum: 3
        featureType:
          description: Feature type identifier. Only applicable to layers of datatype 'geometries'
          type: string
        attribution:
          description: Short reference to recognize the author or provider
          type: string
        license:
          description: License applicable to the tiles
          type: string
        pointOfContact:
          description: Useful information to contact the authors or custodians for the
            layer (e.g. e-mail address, a physical address,  phone numbers, etc)
          type: string
        publisher:
          description: Organization or individual responsible for making the layer available
          type: string
        theme:
          description: Category where the layer can be grouped
          type: string
        crs:
          allOf:
            - description: Coordinate Reference System (CRS)
            - $ref: '#/components/schemas/crs'
        epoch:
          description: Epoch of the Coordinate Reference System (CRS)
          type: number
        minScaleDenominator:
          description: Minimum scale denominator for usage of the layer
          type: number
        maxScaleDenominator:
          description: Maximum scale denominator for usage of the layer
          type: number
        minCellSize:
          description: Minimum cell size for usage of the layer
          type: number
        maxCellSize:
          description: Maximum cell size for usage of the layer
          type: number
        maxTileMatrix:
          description: TileMatrix identifier associated with the minScaleDenominator
          type: string
        minTileMatrix:
          description: TileMatrix identifier associated with the maxScaleDenominator
          type: string
        boundingBox:
          allOf:
            - description: Minimum bounding rectangle surrounding the layer
            - $ref: '#/components/schemas/2DBoundingBox'
        created:
          allOf:
            - description: When the layer was first produced
            - $ref: '#/components/schemas/timeStamp'
        updated:
          allOf:
            - description: Last layer change/revision
            - $ref: '#/components/schemas/timeStamp'
        #style:
        #  allOf:
        #    - description: Style used to generate the layer in the tileset
        #    - $ref: 'style.yaml'
        geoDataClasses:
          description: URI identifying a class of data contained in this layer (useful
            to determine compatibility with styles or processes)
          type: array
          items:
            type: string
        propertiesSchema:
          allOf:
            - description: Properties represented by the features in this layer. Can be 
                          the attributes of a feature dataset (datatype=geometries) or the rangeType
                           of a coverage (datatype=coverage)
            - $ref: '#/components/schemas/propertiesSchema'
        links:
          description: 'Links related to this layer. Possible link ''rel'' values are:
            ''geodata'' for a URL pointing to the collection of geospatial data.'
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/link'
    propertiesSchema:
      description: Attributes of the features or rangetypes of a coverage. Defined by
        a subset of the JSON Schema for the properties of a feature
      type: object
      required:
      - type
      - properties
      properties:
        type:
          type: string
          enum:
          - object
        required:
          description: "Implements 'multiplicity' by citing property 'name' defined as 'additionalProperties'"
          type: array
          minItems: 1
          items:
              type: string
        properties:
          type: object
          default: {}
          additionalProperties:
            description: "No property names are defined but any property name they should be described by JSON Schema. So 'additionalProperties' implements 'name'."
            type: object
            properties:
              title:
                type: string
              description:
                description: "Implements 'description'"
                type: string
              type:
                type: string
                enum:
                - array
                - boolean
                - integer
                - 'null'
                - number
                - object
                - string
              enum:
                description: "Implements 'acceptedValues'"
                type: array
                minItems: 1
                items: {}
                uniqueItems: true
              format:
                description: "Complements implementation of 'type'"
                type: string
              contentMediaType:
                description: "Implements 'mediaType'"
                type: string
              maximum:
                description: "Implements 'range'"
                type: number
              exclusiveMaximum:
                description: "Implements 'range'"
                type: number
              minimum:
                description: "Implements 'range'"
                type: number
              exclusiveMinimum:
                description: "Implements 'range'"
                type: number
              pattern:
                type: string
                format: regex
              maxItems:
                description: "Implements 'upperMultiplicity'"
                type: integer
                minimum: 0
              minItems:
                description: "Implements 'lowerMultiplicity'"
                type: integer
                default: 0
                minimum: 0
              observedProperty:
                type: string
              observedPropertyURI:
                type: string
                format: uri
              uom:
                type: string
              uomURI:
                type: string
                format: uri
  responses:
    Features:
      description: >-
        The response is a document consisting of features in the collection.

        The features included in the response are determined by the server

        based on the query parameters of the request. To support access to

        larger collections without overloading the client, the API supports

        paged access with links to the next page, if more features are selected

        that the page size.


        The `bbox` and `datetime` parameter can be used to select only a

        subset of the features in the collection (the features that are in the

        bounding box or time interval). The `bbox` parameter matches all
        features

        in the collection that are not associated with a location, too. The

        `datetime` parameter matches all features in the collection that are

        not associated with a time stamp or interval, too.


        The `limit` parameter may be used to control the subset of the

        selected features that should be returned in the response, the page
        size.

        Each page may include information about the number of selected and

        returned features (`numberMatched` and `numberReturned`) as well as

        links to support paging (link relation `next`).
      content:
        application/geo+json:
          schema:
            $ref: "#/components/schemas/featureCollectionGeoJSON"
          examples:
            featureCollection:
              $ref: "#/components/examples/featureCollection"
    Feature:
      description: |-
        fetch the feature with id `featureId` in the feature collection
        with id `collectionId`
      content:
        application/geo+json:
          schema:
            $ref: "#/components/schemas/featureGeoJSON"
          examples:
            feature:
              $ref: "#/components/examples/feature"
    ServerError:
      description: A server error occurred.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/exception"
  examples:
    tileSet:
      value:
        title: Test
        dataType: map
        crs: "ESPG:4326"
        links:
          - href: http://data.example.com/id/building/123
            rel: canonical
            type: text/html
            title: canonical URI of the building
      summary: A sample tileset
    featureCollection:
      summary: A sample featureCollection
      value:
        type: FeatureCollection
        links:
          - href: http://data.example.com/collections/buildings/items.json
            rel: self
            type: application/geo+json
            title: this document
          - href: http://data.example.com/collections/buildings/items.html
            rel: alternate
            type: text/html
            title: this document as HTML
          - href: >-
              http://data.example.com/collections/buildings/items.json&offset=10&limit=2
            rel: next
            type: application/geo+json
            title: next page
        timeStamp: "2018-04-03T14:52:23Z"
        numberMatched: 123
        numberReturned: 2
        features:
          - type: Feature
            id: "123"
            geometry:
              type: Point
              coordinates:
                - 0
                - 0
            properties:
              function: residential
              floors: "2"
              lastUpdate: "2015-08-01T12:34:56Z"
          - type: Feature
            id: "132"
            geometry:
              type: Point
              coordinates:
                - 11.234
                - 54.23
            properties:
              function: public use
              floors: "10"
              lastUpdate: "2013-12-03T10:15:37Z"
    feature:
      summary: A sample feature
      value:
        type: Feature
        links:
          - href: http://data.example.com/id/building/123
            rel: canonical
            type: text/html
            title: canonical URI of the building
          - href: http://data.example.com/collections/buildings/items/123.json
            rel: self
            type: application/geo+json
            title: this document
          - href: http://data.example.com/collections/buildings/items/123.html
            rel: alternate
            type: text/html
            title: this document as HTML
          - href: http://data.example.com/collections/buildings
            rel: collection
            type: application/geo+json
            title: the collection document
        id: "123"
        geometry:
          type: Point
          coordinates:
            - 8.66
            - 15.35
        properties:
          function: residential
          floors: "2"
          lastUpdate: "2015-08-01T12:34:56Z"

  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
